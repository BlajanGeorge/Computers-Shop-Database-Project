SELECT * FROM TABELA_PRODUS ORDER BY MODEL;
SELECT * FROM TABELA_LAPTOP ORDER BY MODEL;
SELECT * FROM TABELA_PC ORDER BY MODEL;
SELECT * FROM TABELA_IMPRIMANTA ORDER BY MODEL;


SELECT * FROM all_constraints WHERE Table_Name = 'TABELA_PRODUS';
SELECT * FROM all_constraints WHERE Table_Name = 'TABELA_PC';
SELECT * FROM all_constraints WHERE Table_Name = 'TABELA_LAPTOP';
SELECT * FROM all_constraints WHERE Table_Name = 'TABELA_IMPRIMANTA';

--Am afisat toate inregistrarile din tabele si constrangerile existente
--pana acum.

--triggere speciale
CREATE OR REPLACE TRIGGER check_unicitate_laptop
BEFORE INSERT ON TABELA_LAPTOP FOR EACH ROW
DECLARE
v_tip TABELA_PRODUS.TIP%TYPE;
BEGIN
SELECT tip INTO v_tip
FROM TABELA_PRODUS
WHERE MODEL=:NEW.MODEL;
IF v_tip like 'PC' THEN
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
IF v_tip like 'IMPRIMANTA' THEN 
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
END;


CREATE OR REPLACE TRIGGER check_unicitate_PC
BEFORE INSERT ON TABELA_PC FOR EACH ROW
DECLARE
v_tip TABELA_PRODUS.TIP%TYPE;
BEGIN
SELECT tip INTO v_tip
FROM TABELA_PRODUS
WHERE MODEL=:NEW.MODEL;
IF v_tip like 'LAPTOP' THEN
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
IF v_tip like 'IMPRIMANTA' THEN 
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
END;


CREATE OR REPLACE TRIGGER check_unicitate_Imprimanta
BEFORE INSERT ON TABELA_IMPRIMANTA FOR EACH ROW
DECLARE
v_tip TABELA_PRODUS.TIP%TYPE;
BEGIN
SELECT tip INTO v_tip
FROM TABELA_PRODUS
WHERE MODEL=:NEW.MODEL;
IF v_tip like 'LAPTOP' THEN
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
IF v_tip like 'PC' THEN 
RAISE_APPLICATION_ERROR(-20500,'NU CORESPUNDE TIPUL');
END IF;
END;

-------------------------------------------------------



select 'Model: ' || MODEL || ' Culoare: ' || CULOARE || ' Tip: ' || TIP AS "Detaliile imprimantelor:"
from TABELA_IMPRIMANTA
WHERE CULOARE LIKE 'D'
ORDER BY TIP;


SELECT * 
FROM TABELA_LAPTOP
WHERE ECRAN=15.6
ORDER BY VITEZA DESC,HD DESC;

SELECT MODEL,FABRICANT,PRET
FROM TABELA_PRODUS a   JOIN TABELA_IMPRIMANTA b USING (MODEL)
WHERE b.TIP LIKE 'LASER' AND b.CULOARE LIKE 'D'
ORDER BY PRET;



SELECT tabel1.MODEL "model1" ,  tabel2.MODEL "model2"
FROM TABELA_PRODUS tabel1 JOIN TABELA_PRODUS tabel2 
ON (tabel1.fabricant=tabel2.fabricant)
WHERE tabel1.MODEL!=tabel2.MODEL AND tabel1.TIP like 'PC' AND tabel2.TIP like 'PC' AND tabel1.MODEL<tabel2.MODEL;


SELECT FABRICANT
FROM TABELA_PRODUS
WHERE TIP LIKE 'LAPTOP' AND pret>= ALL
(SELECT PRET
FROM TABELA_PRODUS
WHERE TIP LIKE 'LAPTOP');


SELECT MODEL,TIP
FROM TABELA_PRODUS
WHERE TIP LIKE 'IMPRIMANTA' AND PRET IN 
(SELECT PRET
FROM TABELA_PRODUS
WHERE TIP LIKE 'IMPRIMANTA' AND model=123)
AND MODEL<>
(SELECT MODEL
FROM TABELA_PRODUS
WHERE MODEL=123);

SELECT MODEL
FROM TABELA_PRODUS
WHERE TIP LIKE 'PC' AND  PRET =
(SELECT MIN(pret)
FROM TABELA_PRODUS
WHERE TIP LIKE 'PC');


SELECT b.TIP,AVG(a.PRET)
FROM TABELA_PRODUS a JOIN TABELA_IMPRIMANTA b USING (model)
GROUP BY b.TIP;



INSERT INTO TABELA_PRODUS
VALUES(1234,'HP','LAPTOP',999,'euro');

insert into tabela_laptop
values(1234,2.5,4,500,'');

insert into tabela_produs
values(4000,'','LAPTOP',1500,'euro')


DELETE FROM TABELA_PRODUS
WHERE MODEL =
(SELECT MODEL
FROM TABELA_PRODUS
WHERE MODEL <> ALL
(Select model from tabela_laptop) AND tip like 'LAPTOP');



ALTER TABLE
   TABELA_PRODUS
DISABLE constraint
   CHECK_PRICE;



UPDATE  TABELA_PRODUS
SET pret=4.5*pret , moneda='lei'
WHERE TIP LIKE 'PC';



UPDATE  TABELA_PRODUS
SET pret=pret/4.5 , MONEDA='euro'
WHERE TIP LIKE 'PC';

ALTER TABLE
   TABELA_PRODUS
ENABLE constraint
   CHECK_PRICE;


CREATE OR REPLACE TRIGGER CHECK_HD
AFTER INSERT ON TABELA_LAPTOP
BEGIN
UPDATE TABELA_LAPTOP
SET hd=1
WHERE hd<1;
END;

INSERT INTO TABELA_PRODUS
VALUES(150,'STAR','LAPTOP',900,'euro');


INSERT INTO TABELA_LAPTOP
VALUES (150,3,4,0,15.6);


CREATE OR REPLACE TRIGGER check_ram
AFTER UPDATE OF pret ON tabela_produs FOR EACH ROW
DECLARE
v_ram tabela_laptop.ram%type;
v_ram_max tabela_laptop.ram%type;
BEGIN
select max(ram) into v_ram_max
from tabela_laptop;
if :new.pret<:old.pret then
select ram into v_ram
from tabela_laptop
where model=:OLD.model;
IF v_ram=v_ram_max THEN
RAISE_APPLICATION_ERROR(-20501,'PRET MIC, DOMNU');
END IF;
END IF;
END;


CREATE OR REPLACE VIEW PCNou AS
SELECT model,fabricant,pret, viteza, ram, hd
FROM TABELA_PRODUS NATURAL JOIN TABELA_PC; 

CREATE OR REPLACE TRIGGER new_PC
INSTEAD OF INSERT ON PCNou
BEGIN
INSERT INTO TABELA_PRODUS
VALUES (:NEW.model, :NEW.fabricant,'',
:NEW.pret,'');
INSERT INTO TABELA_PC
VALUES (:NEW.model,:NEW.viteza,:NEW.ram,:NEW.hd);
END;

INSERT INTO PCNou
SELECT 3000,'LENOVO',2500,2.5,16,600
FROM DUAL;

